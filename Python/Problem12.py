"""
@author: mces58

Problem 12
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

Answer: 76576500
"""

import math

# function to get the nth triangle number


def getTriangleNumber(n):
    return n * (n + 1) // 2

# function to get the number of factors of a given number


def getNumFactors(n):
    numFactors = 0
    sqrtN = int(math.sqrt(n))

    # check factors up to the square root of n
    for i in range(1, sqrtN + 1):
        if n % i == 0:
            numFactors += 2

    # if n is a perfect square, subtract 1 from the count
    if sqrtN * sqrtN == n:
        numFactors -= 1

    return numFactors


n = 1
while True:
    triangleNum = getTriangleNumber(n)
    numFactors = getNumFactors(triangleNum)

    if numFactors > 500:
        print(triangleNum)
        break

    n += 1
